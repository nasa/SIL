%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Abstract:
%%   Simulink Coder TLC Code Generation file for block cfs_gnc_time 
%%                               
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

%implements cfs_gnc_time "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %% The Target Language must be C
  %% This is locked by cfs_selectcallback.m

  %if (!SLibIsHostBasedSimulationTarget())
  %% 
  %% Define a global TLC variable to be accessed by the cfs_interface.tlc
  %% 
  %if EXISTS("::__cfsGncTimeIsUsed__") == 0
    %assign ::__cfsGncTimeIsUsed__ = 1
  %endif

  %openfile tempExternBuf
  #include "eci_app.h"
    extern ECI_TimeStamp_t ECI_Step_TimeStamp;
  %closefile tempExternBuf  
 
  %%
  %% Stuff the extern declaration for the GNC Time struct into
  %% model_private.h
  %%
  %<LibCacheExtern(tempExternBuf)>
  %%
  %assign mdlPrivHdrFileName = SLibGetFileNameForCode("mdl_priv_hdr") + ".h"
  %<LibAddToCommonIncludes(mdlPrivHdrFileName)>
  
  %% The csl_app.h will contain the GNC Time struct typedef so
  %% include in the model.h
  %% Note: cfs_interface template will also place it in model.h
  %% But this needs to be here for a model reference which does
  %% NOT use the cfs_interface template.
  %%
  %<LibAddToCommonIncludes("eci_app.h")>
  %endif
  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
    %if !LibBlockOutputSignalIsExpr(0)
      %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
      %assign p1_val = LibBlockParameter(p1, "", "", 0)
      %if (SLibIsHostBasedSimulationTarget())
        %% If generating code for a sim target, use simulink timeyy
        %<y1_val> = %<LibGetTaskTimeFromTID(block)> + %<p1_val>;
      %else
        %% otherwise this is target code, so
        %% access uint time fields from GNC time struct
        %<y1_val> = ((real_T)ECI_Step_TimeStamp.Seconds + ((real_T)ECI_Step_TimeStamp.Subseconds/4294967296.0));
      %endif 
    %endif 
  %%
%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign p1_val = LibBlockParameter(p1, "", "", 0)
  %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
  %%
  %switch retType
    %case "Signal"
      %if portIdx == 0
        %if (SLibIsHostBasedSimulationTarget())
            %% If generating code for a sim target, use simulink timeyy
            %return "(%<LibGetTaskTimeFromTID(block)> + %<p1_val>)"
        %else
            %% otherwise this is target code, so
            %% access uint time fields from GNC time struct
            %return "((real_T)ECI_Step_TimeStamp.Seconds + ((real_T)ECI_Step_TimeStamp.Subseconds/4294967296.0))"
        %endif
      %else
        %assign errTxt = "Block output port index not supported: %<portIdx>"
        %<LibBlockReportError(block,errTxt)>
      %endif
    %default
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
  %endswitch
  %%
%endfunction

%% [EOF]
