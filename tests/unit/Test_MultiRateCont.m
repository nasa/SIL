 % 
% CFE SIL Interface code generation test cases for:
% Model: MultiRateCont
% Tests:
%   - Model is using reusable interface
%   - Model has continuous support on
%   - Model is muti-rate
%   - Model has no CFE blocks
%   - Model has DWork states and state table is turned on
%

classdef Test_MultiRateCont < cfetargettester.CfeTargetTester
    
    properties
        TestModel = 'MultiRateCont'
        TestInterface = 'eci_interface.h'
        TestData  = 'test_data.mat'
    end
    
    methods(TestClassSetup)
        function loadModel(testcase)
                load_system(testcase.TestModel);
                testcase.configModelForTesting(testcase.TestModel);                
                testcase.addTeardown(@() close_system(testcase.TestModel, 0));
        end
    end
    
    methods(Test)
        %
        % Check that simulation modes work without warnings
        function testSimulationModes(testcase)
            import matlab.unittest.constraints.IssuesNoWarnings          
            testcase.verifyThat(@() testcase.normalModeSim(testcase.TestModel), IssuesNoWarnings);                
            testcase.verifyThat(@() testcase.acceleratorModeSim(testcase.TestModel), IssuesNoWarnings);   
            testcase.verifyThat(@() testcase.rapidAccelModeSim(testcase.TestModel), IssuesNoWarnings);       
            testcase.verifyThat(@() testcase.silModeSim(testcase.TestModel), IssuesNoWarnings);                              
        end
        
        % Check basic contents of SIL interface header 
        % - this will generate code
        %
        % This test model will have static data defined in the interface
        % (see patterns below).
        function testInterfaceHeader(testcase)  
            import matlab.unittest.constraints.IssuesNoWarnings
            
            mdl = testcase.TestModel;
            
            % model build should produce no warnings
            testcase.verifyThat(@() testcase.generateCode(), IssuesNoWarnings);                
            
            % Check typical patterns
            patterns(1).FileName = [testcase.TestInterface];          
            patterns(1).ContainsOrderedPatterns = { ...
                '#define\s*ECI_APP_REVISION_NUMBER\s*', ...
                '#define\s*MODEL_NAME_LEN\s*', ...                               
                ['#define\s*ECI_FLAG_MID\s*',upper(mdl),'_FDC_MID'], ...
                ['#define\s*ECI_CMD_MID\s*',upper(mdl),'_CMD_MID'], ...
                ['#define\s*ECI_PERF_ID\s*',upper(mdl),'_PERF_ID'], ...
                ['#define\s*ECI_TICK_MID\s*',upper(mdl),'_TICK_MID'], ...
                ['#define\s*ECI_APP_MAIN\s*',lower(mdl),'_AppMain'], ...
                ['#define\s*ECI_APP_NAME_UPPER\s*\x22',upper(mdl),'\x22'], ...
                ['#define\s*ECI_APP_NAME_LOWER\s*\x22',lower(mdl),'\x22'], ...                
                ['#define\s*ECI_CMD_PIPE_NAME\s*\x22',upper(mdl),'_CMD_PIPE\x22'], ...    
                ['#define\s*ECI_DATA_PIPE_NAME\s*\x22',upper(mdl),'_DATA_PIPE\x22']};                               
%                 ['#define\s*ECI_TICK_HZ\s*',upper(mdl),'_HZ'], ...                               
%                 ['#define\s*ECI_HK_MID\s*',upper(mdl),'_HK_MID'], ... 
            % Note Continuous and ZC states since continuous time is
            % supported in this model.
            patterns(2).FileName = [testcase.TestInterface];          
            patterns(2).ContainsOrderedPatterns = { ...                      
                ['static\s*RT_MODEL_' mdl '\s*' mdl '_M;'],...
                ['static\s*RT_MODEL_' mdl '\s*\*const\s*' mdl '_MPtr\s*=\s*&' mdl '_M;'],...
                ['static\s*D_Work_' mdl '\s*' mdl '_DWork;'],...
                ['static\s*ContinuousStates_' mdl '\s*' mdl '_X;'],...
                ['static\s*PrevZCSigStates_' mdl '\s*' mdl '_PrevZCSigState;']};

            patterns(3).FileName = [testcase.TestInterface];          
            patterns(3).ContainsOrderedPatterns = { ...                                 
                ['static\s*InBus_msg\s*' mdl '_U_In1;'],...
                ['static\s*env_cmd_msg\s*' mdl '_U_In2;'],...
                ['static\s*InBus_msg\s*' mdl '_U_In3;'],...
                ['static\s*OutBus_msg\s*' mdl '_Y_Output;'],...
                ['static\s*gnc_cmd_msg\s*' mdl '_Y_OutputB;'],...
                ['static\s*gnc_cmd_msg\s*' mdl '_Y_OutputC;']};            
            
            % Check existence of state table info (model config has state
            % table selected).
            patterns(4).FileName = [testcase.TestInterface];          
            patterns(4).ContainsOrderedPatterns = { ...                                           
                ['#define\s*ECI_STATE_TABLE_NAME\s*\"' upper(mdl) '\.STATE\"'],...	
                ['\s*ECI_TBL_FILEDEF(ECI_TBL_FileDef_State,\s*' mdl '_DWork,'],...
        	    ['\s*' upper(mdl) '\.STATE,\s*' upper(mdl) '\s*STATES,'],...
        	    ['\s*' mdl '_state.tbl)'],...
                ['#define\s*ECI_STATE_TBL\s*' mdl '_DWork']};           
            
            % Check empty Send/Receive buffers (when no cfe blocks in
            % model)
            patterns(5).FileName = [testcase.TestInterface];          
            patterns(5).ContainsOrderedPatterns = { ...                                           
                '\s*static\s*ECI_Msg_t\s*ECI_MsgSnd\[\]\s*=\s*{',...
                '\s*{\s*0,\s*NULL,\s*0,\s*NULL,\s*NULL\s*}',...
                '\s*};',...
                '\s*static\s*ECI_Msg_t\s*ECI_MsgRcv\[\]\s*=\s*{',...
                '\s*{\s*0,\s*NULL,\s*0,\s*NULL,\s*NULL\s*}',...
                '\s*};'};
            
            % model init, step and term patterns are for reusable interface
            % model_initialize pattern 
            patterns(6).FileName = [testcase.TestInterface];
            patterns(6).ContainsOrderedPatterns = { ...
                '#define\s*ECI_INIT_FCN\s*\\',...cl
                ['\s*' mdl '_M->dwork\s*=\s*&' mdl '_DWork;\s*'],...
                ['\s*' mdl '_M->contStates\s*=\s*&' mdl '_X;\s*'] ,...
                ['\s*' mdl '_M->prevZCSigState\s*=\s*&' mdl '_PrevZCSigState;\s*'],...
                ['\s*' mdl '_initialize\(' mdl '_M,\s*&' mdl '_U_In1,\s*&' mdl '_U_In2,\s*&' mdl '_U_In3,\s*&' mdl '_Y_Output,\s*&' mdl '_Y_OutputB,\s*&' mdl '_Y_OutputC\);']};
	
            % model_step pattern 
            patterns(7).FileName = [testcase.TestInterface];
            patterns(7).ContainsOrderedPatterns = { ...
                '\s*#define ECI_STEP_FCN\s*\\' ...
                mdl '_step\s*\(' mdl '_M,\s*' mdl '_U_In1,\s*' mdl '_U_In2,\s*' mdl '_U_In3,\s*&' mdl '_Y_Output,\s*&' mdl '_Y_OutputB,\s*&' mdl '_Y_OutputC\s*\)\s*;'};
            
             % model_terminate pattern 
            patterns(8).FileName = [testcase.TestInterface];
            patterns(8).ContainsOrderedPatterns = { ...
                '\s*ECI_TERM_FCN\s*' mdl '_terminate\s*\(' mdl '_M\s*\)\s*;'};
           
            testcase.checkCodeContents(patterns);
        end        

    end
end
